#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <iostream>
#include <cmath>
#include <sys/resource.h> 

#include "../PREPRO/VTK.h"
#include "../PREPRO/genesis.h"
#include "../PREPRO/micro.h"
#include "../PROCESS/reso_FFT.h"
#include "../PROCESS/ftstring.h"
#include "../PROCESS/ctime.h"

#include "view.h"
#include "conf.h"

typedef double R;
const R Pi=3.14159265;

using namespace std;

int main(int argc, char *argv[])
{
R t1=CPUtime();


// RESOLUTION 1
string str_H1 = argv[1];
from_string<int>(H1,str_H1,dec);

// RESOLUTION 2
string str_H2 = argv[2];
from_string<int>(H2,str_H2,dec);
N_TOT = H1*H2;
cH=min(H1,H2);

// DISCRETISATION X
string str_HX = argv[3];
from_string<int>(HX,str_HX,dec);

// DISCRETISATION Y
string str_HY = argv[4];
from_string<int>(HY,str_HY,dec);

// CONTRASTE
string str_cont = argv[5];
from_string<R>(cont,str_cont,dec);

// Nom du fichier microstructure
/*
string filename = argv[6];
string link="../../MAP/"+filename;
const char * filename1 = link.c_str();
*/

// NOMBRE DE DISQUES
string str_NB_DIS = argv[6];
from_string<int>(NB_DIS,str_NB_DIS,dec);

// RAPPORT D ECHELLE
string str_R_ECH = argv[7];
from_string<R>(R_ECH,str_R_ECH,dec);
R_DIS=H1/(2.*R_ECH);

cout<<"Nombre de Disques : "<<NB_DIS<<endl;
cout<<"Rayon de Disques : "<<R_DIS<<endl;

// ALLOCATION DYNAMIQUE
allocat_memory_elas2D();

// LECTURE DE LA GRILLE
//readVTK2map(HX,HY,H1,H2,PR_INC,LIST_N,filename1);

// GENER
gener2_disk_alea(NB_DIS,R_DIS,N_TOT,H1,H2,LIST_N,LIST_X,LIST_Y,LIST_R);
treat_per2(H1,H2,LIST_N);
eval_fv(PR_INC,N_TOT,LIST_N);
expVTK2(LIST_N,H1,H2,N_TOT,PR_INC);

// DETECTION AGREGAT
detect_agr2(H1,H2,LIST_A,LIST_N,N_TOT);

// COMPACITE
pC=PR_INC;
cout<<"Pourcentage d inclusions après traitement: "<<PR_INC<<endl;

// REPERAGE CONTOURS
int N_SEG;
int IN=1;
int OUT=0;

// Search contour
search_cont(N_SEG,LIST_N,H1,H2,IN,OUT);
nQ=N_SEG;

// Treat contour
treat_cont(N_SEG,LIST_N,LIST_Q,LIST_V,H1,H2,IN,OUT);

//// HOMOGENEISATION

// Caractéristiques matériaux
// Matrice

R Y  = 1.;
cout <<"Module de Young de la matrice : "<<Y<<endl;
R nu = 0.247    ;
cout <<"Coefficient de Poisson de la matrice : "<<nu<<endl;
R G  = Y/(2*(1+nu));
cout <<"Module de cisaillement de la matrice : "<<G<<endl<<endl;

R C0[3][3];R C1[3][3];R C2[3][3];
R C1pC0[3][3];R C2pC0[3][3];
R C1mC0[3][3];R C2mC0[3][3];
R iC1[3][3];R iC2[3][3];
R iC1_C0[3][3];R iC2_C0[3][3];

for(int i=0;i<3;i++){
  for(int j=0;j<3;j++){
    C0[i][j] = 0.;
    C1[i][j] = 0.;
    C2[i][j] = 0.;
    iC1[i][j] = 0.;
    iC2[i][j] = 0.;   
    iC1_C0[i][j] = 0.;
    iC2_C0[i][j] = 0.;      
    C1pC0[i][j] = 0.;
    C2pC0[i][j] = 0.;    
    C1mC0[i][j] = 0.;
    C2mC0[i][j] = 0.;       
  }
}


C1[0][0] = Y/(1-nu*nu);
C1[0][1] = (nu*Y)/(1-nu*nu);
C1[1][0] = (nu*Y)/(1-nu*nu);
C1[1][1] = C1[0][0];
C1[2][1] = 0;
C1[2][0] = C1[2][1];
C1[0][2] = C1[2][1];
C1[1][2] = C1[2][1];
C1[2][2] = 2.*G;

R K1=(C1[0][0]+C1[0][1]+C1[1][0]+C1[1][1])/4;

// Inclusions
R E1  = Y*cont;
cout <<"Module de Young 1 de l'inclusion : "<<E1<<endl;
R E2  = E1;
cout <<"Module de Young 2 de l'inclusion : "<<E2<<endl;
R NU12= 0.247  ;  //1/4
cout <<"Coefficient de Poisson 12 de l'inclusion : "<<NU12<<endl;
R NU21= 0.247  ; 
cout <<"Coefficient de Poisson 21 de l'inclusion : "<<NU21<<endl;
R G12 = E1/(2*(1+NU12)) ;
cout <<"Module de cisaillement de l'inclusion : "<<G12<<endl;

C2[0][0] = E1/(1-NU21*NU12);
C2[0][1] = (NU21*E1)/(1-NU21*NU12);
C2[1][0] = (NU12*E2)/(1-NU12*NU21);
C2[1][1] = E2/(1-NU21*NU12);
C2[2][1] = 0;
C2[2][0] = C2[2][1];
C2[0][2] = C2[2][1];
C2[1][2] = C2[2][1];
C2[2][2] = 2.*G12;

R K2=(C2[0][0]+C2[0][1]+C2[1][0]+C2[1][1])/4.;

//milieu 0
R G0 =-sqrt(G12*G);
R K0 =-sqrt(K1*K2);

C0[0][0]=K0+G0;
C0[0][1]=K0-G0;
C0[1][0]=K0-G0;
C0[1][1]=K0+G0;
C0[2][2]=2.*G0;

//c1pc0

C1pC0[0][0]=C1[0][0]+C0[0][0];
C1pC0[0][1]=C1[0][1]+C0[0][1];
C1pC0[1][0]=C1[1][0]+C0[1][0];
C1pC0[1][1]=C1[1][1]+C0[1][1];
C1pC0[2][2]=C1[2][2]+C0[2][2];

//c2pc0

C2pC0[0][0]=C2[0][0]+C0[0][0];
C2pC0[0][1]=C2[0][1]+C0[0][1];
C2pC0[1][0]=C2[1][0]+C0[1][0];
C2pC0[1][1]=C2[1][1]+C0[1][1];
C2pC0[2][2]=C2[2][2]+C0[2][2];

//c1mc0

C1mC0[0][0]=C1[0][0]-C0[0][0];
C1mC0[0][1]=C1[0][1]-C0[0][1];
C1mC0[1][0]=C1[1][0]-C0[1][0];
C1mC0[1][1]=C1[1][1]-C0[1][1];
C1mC0[2][2]=C1[2][2]-C0[2][2];

//c2mc0

C2mC0[0][0]=C2[0][0]-C0[0][0];
C2mC0[0][1]=C2[0][1]-C0[0][1];
C2mC0[1][0]=C2[1][0]-C0[1][0];
C2mC0[1][1]=C2[1][1]-C0[1][1];
C2mC0[2][2]=C2[2][2]-C0[2][2];

R det;
det=C1mC0[0][0]*(C1mC0[1][1]*C1mC0[2][2]-C1mC0[1][2]*C1mC0[2][1]);
det-=(C1mC0[1][0]*(C1mC0[0][1]*C1mC0[2][2]-C1mC0[0][2]*C1mC0[2][1]));
det+=(C1mC0[2][0]*(C1mC0[0][1]*C1mC0[1][2]-C1mC0[0][2]*C1mC0[1][1]));

//iC1mC0

iC1[0][0]=2*(C1mC0[1][1]*C1mC0[2][2]-C1mC0[1][2]*C1mC0[2][1])/det;
iC1[0][1]=-2*(C1mC0[0][1]*C1mC0[2][2]-C1mC0[0][2]*C1mC0[2][1])/det;
iC1[0][2]=2*(C1mC0[0][1]*C1mC0[1][2]-C1mC0[0][2]*C1mC0[1][1])/det;
iC1[1][0]=-2*(C1mC0[1][0]*C1mC0[2][2]-C1mC0[2][0]*C1mC0[1][2])/det;
iC1[1][1]=2*(C1mC0[0][0]*C1mC0[2][2]-C1mC0[2][0]*C1mC0[0][2])/det;
iC1[1][2]=-2*(C1mC0[0][0]*C1mC0[1][2]-C1mC0[1][0]*C1mC0[0][2])/det;
iC1[2][0]=2*(C1mC0[1][0]*C1mC0[2][1]-C1mC0[2][0]*C1mC0[1][1])/det;
iC1[2][1]=-2*(C1mC0[0][0]*C1mC0[2][1]-C1mC0[2][0]*C1mC0[0][1])/det;  
iC1[2][2]=2*(C1mC0[0][0]*C1mC0[1][1]-C1mC0[1][0]*C1mC0[0][1])/det; 

//iC1_C0

iC1_C0[0][0]=iC1[0][0]*C0[0][0]+iC1[0][1]*C0[1][0]+iC1[0][2]*C0[2][0];
iC1_C0[0][1]=iC1[0][0]*C0[0][1]+iC1[0][1]*C0[1][1]+iC1[0][2]*C0[2][1];
iC1_C0[0][2]=iC1[0][0]*C0[0][2]+iC1[0][1]*C0[1][2]+iC1[0][2]*C0[2][2];
iC1_C0[1][0]=iC1[1][0]*C0[0][0]+iC1[1][1]*C0[1][0]+iC1[1][2]*C0[2][0];
iC1_C0[1][1]=iC1[1][0]*C0[0][1]+iC1[1][1]*C0[1][1]+iC1[1][2]*C0[2][1];
iC1_C0[1][2]=iC1[1][0]*C0[0][2]+iC1[1][1]*C0[1][2]+iC1[1][2]*C0[2][2];
iC1_C0[2][0]=iC1[2][0]*C0[0][0]+iC1[2][1]*C0[1][0]+iC1[2][2]*C0[2][0];
iC1_C0[2][1]=iC1[2][0]*C0[0][1]+iC1[2][1]*C0[1][1]+iC1[2][2]*C0[2][1];  
iC1_C0[2][2]=iC1[2][0]*C0[0][2]+iC1[2][1]*C0[1][2]+iC1[2][2]*C0[2][2];
		
det=C2mC0[0][0]*(C2mC0[1][1]*C2mC0[2][2]-C2mC0[1][2]*C2mC0[2][1]);
det-=(C2mC0[1][0]*(C2mC0[0][1]*C2mC0[2][2]-C2mC0[0][2]*C2mC0[2][1]));
det+=(C2mC0[2][0]*(C2mC0[0][1]*C2mC0[1][2]-C2mC0[0][2]*C2mC0[1][1]));		
		
//iC2

iC2[0][0]=2*(C2mC0[1][1]*C2mC0[2][2]-C2mC0[1][2]*C2mC0[2][1])/det;
iC2[0][1]=-2*(C2mC0[0][1]*C2mC0[2][2]-C2mC0[0][2]*C2mC0[2][1])/det;
iC2[0][2]=2*(C2mC0[0][1]*C2mC0[1][2]-C2mC0[0][2]*C2mC0[1][1])/det;
iC2[1][0]=-2*(C2mC0[1][0]*C2mC0[2][2]-C2mC0[2][0]*C2mC0[1][2])/det;
iC2[1][1]=2*(C2mC0[0][0]*C2mC0[2][2]-C2mC0[2][0]*C2mC0[0][2])/det;
iC2[1][2]=-2*(C2mC0[0][0]*C2mC0[1][2]-C2mC0[1][0]*C2mC0[0][2])/det;
iC2[2][0]=2*(C2mC0[1][0]*C2mC0[2][1]-C2mC0[2][0]*C2mC0[1][1])/det;
iC2[2][1]=-2*(C2mC0[0][0]*C2mC0[2][1]-C2mC0[2][0]*C2mC0[0][1])/det;  
iC2[2][2]=2*(C2mC0[0][0]*C2mC0[1][1]-C2mC0[1][0]*C2mC0[0][1])/det; 

//iC2_C0

iC2_C0[0][0]=iC2[0][0]*C0[0][0]+iC2[0][1]*C0[1][0]+iC2[0][2]*C0[2][0];
iC2_C0[0][1]=iC2[0][0]*C0[0][1]+iC2[0][1]*C0[1][1]+iC2[0][2]*C0[2][1];
iC2_C0[0][2]=iC2[0][0]*C0[0][2]+iC2[0][1]*C0[1][2]+iC2[0][2]*C0[2][2];
iC2_C0[1][0]=iC2[1][0]*C0[0][0]+iC2[1][1]*C0[1][0]+iC2[1][2]*C0[2][0];
iC2_C0[1][1]=iC2[1][0]*C0[0][1]+iC2[1][1]*C0[1][1]+iC2[1][2]*C0[2][1];
iC2_C0[1][2]=iC2[1][0]*C0[0][2]+iC2[1][1]*C0[1][2]+iC2[1][2]*C0[2][2];
iC2_C0[2][0]=iC2[2][0]*C0[0][0]+iC2[2][1]*C0[1][0]+iC2[2][2]*C0[2][0];
iC2_C0[2][1]=iC2[2][0]*C0[0][1]+iC2[2][1]*C0[1][1]+iC2[2][2]*C0[2][1];  
iC2_C0[2][2]=iC2[2][0]*C0[0][2]+iC2[2][1]*C0[1][2]+iC2[2][2]*C0[2][2];


// Résolution fft2
R sigma11[3];
R sigma22[3];
R sigma12[3];

reso_fft2_elas_ctr(LIST_N,LIST_SXX,H1,H2,N_TOT,G0,K0,C0,C1,C2,C1pC0,C2pC0,iC1_C0,iC2_C0,sigma11,1,1,minsxx,maxsxx);
reso_fft2_elas_ctr(LIST_N,LIST_SYY,H1,H2,N_TOT,G0,K0,C0,C1,C2,C1pC0,C2pC0,iC1_C0,iC2_C0,sigma22,2,2,minsyy,maxsyy);
reso_fft2_elas_ctr(LIST_N,LIST_SXY,H1,H2,N_TOT,G0,K0,C0,C1,C2,C1pC0,C2pC0,iC1_C0,iC2_C0,sigma12,3,3,minsxy,maxsxy);
/*
reso_fft2_elas_dpct(LIST_N,LIST_UX,H1,H2,N_TOT,G0,K0,C0,C1,C2,C1pC0,C2pC0,iC1_C0,iC2_C0,sigma11,1,minux,maxux);
reso_fft2_elas_dpct(LIST_N,LIST_UY,H1,H2,N_TOT,G0,K0,C0,C1,C2,C1pC0,C2pC0,iC1_C0,iC2_C0,sigma22,2,minuy,maxuy);
*/

R S11=(sigma11[0])/(sigma11[0]*sigma11[0]-sigma11[1]*sigma11[1]);
R S12=(-sigma11[1])/(sigma11[0]*sigma11[0]-sigma11[1]*sigma11[1]);
R S22=(-sigma22[1])/(sigma22[0]*sigma22[0]-sigma22[1]*sigma22[1]);
R S21=(sigma22[0])/(sigma22[0]*sigma22[0]-sigma22[1]*sigma22[1]);
R S33=1./sigma12[2];

R det1=S11*S22-S12*S21;

R E11=S22/det1;
R E22=S11/det1;
R E12=-S12/det1;
R E21=-S21/det1;
R E33=sigma12[2];

R EE1=1./S11;
R EE2=1./S22;
R GG=(1./(2*S33));

R NNU1=(-S21/S11);
R NNU2=(-S12/S22);

//
////Entrée/Sortie des données
cout<<"COMPOSANTE DE LA MATRICE DE SOUPLESSE"<<endl;
cout<<"S11 :"<<S11<<endl;
cout<<"S12 :"<<S12<<endl;
cout<<"S21 :"<<S21<<endl;
cout<<"S22 :"<<S22<<endl;
cout<<"S33 :"<<S33<<endl;
cout<<"COMPOSANTE DE LA MATRICE DE RIGIDITE"<<endl;
cout<<"E11 :"<<E11<<endl;
cout<<"E12 :"<<E12<<endl;
cout<<"E21 :"<<E21<<endl;
cout<<"E22 :"<<E22<<endl;
cout<<"E33 :"<<E33<<endl;
cout<<"PROPRIETES"<<endl;
cout<<"E1 : "<<EE1<<endl;
cout<<"E2 : "<<EE2<<endl;
cout<<"G  : "<<GG<<endl;
cout<<"NU1 : "<<NNU1<<endl;
cout<<"NU2 : "<<NNU2<<endl;

R t2=CPUtime()-t1;
cout<<"Temps de calcul CPU : "<<t2<<endl;

view_init2(argc,argv);
view_micro2_disk();
view_micro2_agr();
view_micro2_cont();
view_micro2_sxx();
view_micro2_syy();
view_micro2_sxy();/*
view_micro2_ux();
view_micro2_uy();*/

// LIBERATION MEMOIRE
free_memory_elas2D();

return 1;
}
